Microsoft (R) Macro Assembler Version 6.11		    05/14/18 23:43:34
tempfile.asm						     Page 1 - 1


 0000				DATAS SEGMENT
 0000 0D 0A 45 52 52 4F			STRING1 DB 0DH,0AH,"ERROR$"
       52 24
 0008 0000			    NUM DW 0
 000A 0000			    RESULTH DW 0
 000C 0000			    RESULTL DW 0
 000E 0000			    COUNT DW 0
				    ;此处输入数据段代码  
 0010				DATAS ENDS

 0000				STACKS SEGMENT
				    ;此处输入堆栈段代码
 0000				STACKS ENDS

 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS,SS:STACKS
 0000				START:
 0000  B8 ---- R		    MOV AX,DATAS
 0003  8E D8			    MOV DS,AX
				    
 0005				INPUT:   

 0005  B4 01			    MOV AH,01H;输入
 0007  CD 21			    INT 21H
				    
 0009  3C 0D			    CMP AL,13;ENTER则进入下一步
 000B  74 24			    JZ STEP2
				    
 000D  3C 30			    CMP AL,'0';判断合法性
 000F  73 03 E9 00B1		    JB ERR1
 0014  3C 39			    CMP AL,'9'
 0016  76 03 E9 00AA		    JA ERR1
				    
 001B  2C 30			    SUB AL,'0'    
 001D  B4 00			    MOV AH,0;
 001F  50			    PUSH AX;暂时空出AX
				    
 0020  A1 0008 R		    MOV AX,NUM
				    
 0023  BB 000A			    MOV BX,10;乘数放入bx
 0026  F7 E3			    MUL BX;把num乘BX(10)存入AX
 0028  5A			    POP DX;把输入的数字放入DX
 0029  03 D0			    ADD DX,AX;实现输入多位数
 002B  89 16 0008 R		    MOV NUM,DX;把得到的多位数放入data段    
				    
 002F  EB D4			    JMP INPUT
				    
 0031				STEP2:
				;
				;
				;
 0031  B2 41				MOV DL,'A'
 0033  B4 02				MOV AH,2
 0035  CD 21				INT 21H
					
 0037  B8 0001				MOV AX,1
 003A  50				PUSH AX
 003B  A1 0008 R			MOV AX,NUM;用ax传值 
 003E  0E E8 004E			CALL MULDW;调用子程序
				;
				;	
				;
 0042  B2 42				MOV DL,'B'
 0044  B4 02				MOV AH,2
 0046  CD 21				INT 21H
					
 0048				STEP3:  ;转化为十进制放入堆栈段
					
 0048  B9 000A				MOV CX,10;存放除数
 004B  8B 16 000A R			MOV DX,RESULTH
 004F  A1 000C R			MOV AX,RESULTL
 0052  50				PUSH AX;保存低16位
 0053  8B C2				MOV AX,DX;高16位放入ax
 0055  BA 0000				MOV DX,0;DIV将dx ax连接的双字除以源操作数，所以此处dx清零	
 0058  F7 F1				DIV CX;商放入ax 余数放入dx	
 005A  8B D8				MOV BX,AX;商放入bx
 005C  58				POP AX;拿出低16位
 005D  F7 F1				DIV CX;商放入ax 余数放入dx
 005F  8B CA				MOV CX,DX;余数放入cx
 0061  8B D3				MOV DX,BX;高16位放入dx 低16位放入ax
					
 0063  89 16 000A R			MOV RESULTH,DX
 0067  A3 000C R			MOV RESULTL,AX
 006A  51				PUSH CX;将余数入栈
					
 006B  8B 0E 000E R			MOV CX,COUNT;计数加一
 006F  41				INC CX;
 0070  89 0E 000E R			MOV COUNT,CX;
					
 0074  83 FA 00				CMP DX,0;高16位不为0 则商肯定不为0 继续短除
 0077  75 CF				JNZ STEP3		 
 0079  83 F8 00				CMP AX,0;高16位为0 低16位不为0 继续短除
 007C  75 CA				JNZ STEP3
					
 007E  8B 0E 000E R			MOV CX,COUNT;商为0 设定输出循环次数
					
 0082				OUTPUT:
				    
 0082  5A			    POP DX;将后放入stack段的一个数拿出 放入dx
 0083  83 C2 30			    ADD DX,'0';将数值转化为字符放入dx
				    
 0086  B4 02			    MOV AH,2
 0088  CD 21			    INT 21H;输出dl中ASCII对应的字符
				    
 008A  E2 F6			    LOOP OUTPUT;CX递减到0时停止	
				    
 008C  B4 4C			    MOV AH,4CH
 008E  CD 21			    INT 21H	

					
 0090				MULDW PROC FAR ;子程序 将累乘结果放入数据段
				;
				;
				;	
 0090  50				PUSH AX
 0091  53				PUSH BX
 0092  51				PUSH CX
 0093  52				PUSH DX
					
 0094  B2 43				MOV DL,'C'
 0096  B4 02				MOV AH,2
 0098  CD 21				INT 21H
					
 009A  5A				POP DX
 009B  59				POP CX
 009C  5B				POP BX
 009D  58				POP AX
				;
				;
				;	
 009E  83 F8 00				CMP AX,0;NUM是否为0
 00A1  75 08				JNZ STEP4
 00A3  C7 06 000C R 0001		MOV RESULTL,1
 00A9  EB 06				JMP RETURN

 00AB				STEP4:
					
 00AB  50				PUSH AX
 00AC  48				DEC AX
 00AD  0E E8 FFDF			CALL MULDW
					
 00B1				RETURN:

 00B1  58				POP AX
 00B2  F7 26 000C R			MUL RESULTL;N*[(N-1)!低16位] 结果的低16位放入ax 高16位放入dx
 00B6  8B DA				MOV BX,DX;BX暂时存放高16位
 00B8  A3 000C R			MOV RESULTL,AX;低16位放入数据段
 00BB  F7 26 000A R			MUL RESULTH;N*[(N-1)!高16位] 结果应当只存在低16位 放入ax
 00BF  03 C3				ADD AX,BX;实现双字乘法 其结果的高16位放入ax
 00C1  A3 000A R			MOV RESULTH,AX;高16位放入数据段

 00C4  CB				RET
 00C5				MULDW ENDP

					    
 00C5				ERR1:

 00C5  8D 16 0000 R			LEA DX,STRING1
 00C9  B4 09				MOV AH,9
 00CB  CD 21				INT 21H
					
 00CD  B4 4C			    MOV AH,4CH
 00CF  CD 21			    INT 21H
 00D1				CODES ENDS
				    END START













Microsoft (R) Macro Assembler Version 6.11		    05/14/18 23:43:34
tempfile.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 00D1	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0010	  Para	  Private 
STACKS . . . . . . . . . . . . .	16 Bit	 0000	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

MULDW  . . . . . . . . . . . . .	P Far	 0090	  CODES	Length= 0035 Public
  STEP4  . . . . . . . . . . . .	L Near	 00AB	  CODES	
  RETURN . . . . . . . . . . . .	L Near	 00B1	  CODES	


Symbols:

                N a m e                 Type     Value    Attr

COUNT  . . . . . . . . . . . . .	Word	 000E	  DATAS	
ERR1 . . . . . . . . . . . . . .	L Near	 00C5	  CODES	
INPUT  . . . . . . . . . . . . .	L Near	 0005	  CODES	
NUM  . . . . . . . . . . . . . .	Word	 0008	  DATAS	
OUTPUT . . . . . . . . . . . . .	L Near	 0082	  CODES	
RESULTH  . . . . . . . . . . . .	Word	 000A	  DATAS	
RESULTL  . . . . . . . . . . . .	Word	 000C	  DATAS	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
STEP2  . . . . . . . . . . . . .	L Near	 0031	  CODES	
STEP3  . . . . . . . . . . . . .	L Near	 0048	  CODES	
STRING1  . . . . . . . . . . . .	Byte	 0000	  DATAS	

	   0 Warnings
	   0 Errors
