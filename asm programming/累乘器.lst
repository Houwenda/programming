Microsoft (R) Macro Assembler Version 6.11		    06/03/18 15:56:47
tempfile.asm						     Page 1 - 1


 0000				DATAS SEGMENT
 0000 0D 0A 49 4E 50 55			STRING1 DB 0DH,0AH,"INPUT ERROR$"
       54 20 45 52 52 4F
       52 24
 000E 0D 0A 4F 56 45 52			STRING2 DB 0DH,0AH,"OVERFLOW$"
       46 4C 4F 57 24
 0019 4E 55 4D 3D 20 24			STRING3 DB "NUM= $"
 001F 52 45 53 55 4C 54			STRING4 DB "RESULT= $"
       3D 20 24
 0028 0000			    NUM DW 0
 002A 0000			    N DW 0
 002C 0000			    RESULTH DW 0
 002E 0000			    RESULTL DW 0
 0030 0000			    COUNT DW 0
				    ;此处输入数据段代码  
 0032				DATAS ENDS

 0000				STACKS SEGMENT
				    ;此处输入堆栈段代码
 0000				STACKS ENDS

 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS,SS:STACKS
 0000				START:
 0000  B8 ---- R		    MOV AX,DATAS
 0003  8E D8			    MOV DS,AX
				    
 0005  8D 16 0019 R		    LEA DX,STRING3
 0009  B4 09				MOV AH,9
 000B  CD 21				INT 21H
					
 000D				INPUT:   

 000D  B4 01			    MOV AH,01H;输入
 000F  CD 21			    INT 21H
				    
 0011  3C 0D			    CMP AL,13;ENTER则进入下一步
 0013  74 24			    JZ STEP2
				    
 0015  3C 30			    CMP AL,'0';判断合法性
 0017  73 03 E9 00AA		    JB ERR1
 001C  3C 39			    CMP AL,'9'
 001E  76 03 E9 00A3		    JA ERR1
				    
 0023  2C 30			    SUB AL,'0'    
 0025  B4 00			    MOV AH,0;
 0027  50			    PUSH AX;暂时空出AX
				    
 0028  A1 0028 R		    MOV AX,NUM
				    
 002B  BB 000A			    MOV BX,10;乘数放入bx
 002E  F7 E3			    MUL BX;把num乘BX(10)存入AX
 0030  5A			    POP DX;把输入的数字放入DX
 0031  03 D0			    ADD DX,AX;实现输入多位数
 0033  89 16 0028 R		    MOV NUM,DX;把得到的多位数放入data段    
				    
 0037  EB D4			    JMP INPUT
				    
 0039				STEP2:
					
 0039  B8 0001				MOV AX,1
 003C  50				PUSH AX
 003D  A1 0028 R			MOV AX,NUM;用ax传值 
 0040  E8 0050				CALL MULDW;调用子程序
					
 0043				STEP3:  ;转化为十进制放入堆栈段
					
 0043  B9 000A				MOV CX,10;存放除数
 0046  8B 16 002C R			MOV DX,RESULTH
 004A  A1 002E R			MOV AX,RESULTL
 004D  50				PUSH AX;保存低16位
 004E  8B C2				MOV AX,DX;高16位放入ax
 0050  BA 0000				MOV DX,0;DIV将dx ax连接的双字除以源操作数，所以此处dx清零	
 0053  F7 F1				DIV CX;商放入ax 余数放入dx	
 0055  8B D8				MOV BX,AX;商放入bx
 0057  58				POP AX;拿出低16位
 0058  F7 F1				DIV CX;将dx ax连接的双字除以源操作数 商放入ax 余数放入dx
 005A  8B CA				MOV CX,DX;余数放入cx
 005C  8B D3				MOV DX,BX;高16位放入dx 低16位放入ax
					
 005E  89 16 002C R			MOV RESULTH,DX
 0062  A3 002E R			MOV RESULTL,AX
 0065  51				PUSH CX;将余数入栈
					
 0066  8B 0E 0030 R			MOV CX,COUNT;计数加一
 006A  41				INC CX;
 006B  89 0E 0030 R			MOV COUNT,CX;
					
 006F  83 FA 00				CMP DX,0;高16位不为0 则商肯定不为0 继续短除
 0072  75 CF				JNZ STEP3		 
 0074  83 F8 00				CMP AX,0;高16位为0 低16位不为0 继续短除
 0077  75 CA				JNZ STEP3
					
 0079  8B 0E 0030 R			MOV CX,COUNT;商为0 设定输出循环次数
					
 007D  8D 16 001F R			LEA DX,STRING4
 0081  B4 09				MOV AH,9
 0083  CD 21				INT 21H
					
 0085				OUTPUT:
				    
 0085  5A			    POP DX;将后放入stack段的一个数拿出 放入dx
 0086  83 C2 30			    ADD DX,'0';将数值转化为字符放入dx
				    
 0089  B4 02			    MOV AH,2
 008B  CD 21			    INT 21H;输出dl中ASCII对应的字符
				    
 008D  E2 F6			    LOOP OUTPUT;CX递减到0时停止	
				    
 008F  B4 4C			    MOV AH,4CH
 0091  CD 21			    INT 21H	

					
 0093				MULDW PROC NEAR ;子程序 将累乘结果放入数据段

 0093  83 F8 00				CMP AX,0;NUM是否为0
 0096  75 08				JNZ STEP4
 0098  C7 06 002E R 0001		MOV RESULTL,1
 009E  EB 05				JMP RETURN

 00A0				STEP4:
					
 00A0  50				PUSH AX
 00A1  48				DEC AX
 00A2  E8 FFEE				CALL MULDW
					
 00A5				RETURN:
					
 00A5  59				POP CX;存放call时的地址
 00A6  58				POP AX
 00A7  A3 002A R			MOV N,AX;NUM的值放入数据段供计算高位时使用
 00AA  F7 26 002E R			MUL RESULTL;N*[(N-1)!低16位] 结果的低16位放入ax 高16位放入dx
 00AE  8B DA				MOV BX,DX;BX暂时存放高16位
 00B0  A3 002E R			MOV RESULTL,AX;低16位放入数据段
 00B3  A1 002A R			MOV AX,N;拿出NUM
 00B6  F7 26 002C R			MUL RESULTH;N*[(N-1)!高16位] 结果应当只存在低16位 放入ax
 00BA  83 FA 00				CMP DX,0
 00BD  75 13				JNZ ERR2
 00BF  03 C3				ADD AX,BX;实现双字乘法 其结果的高16位放入ax
 00C1  A3 002C R			MOV RESULTH,AX;高16位放入数据段
 00C4  51				PUSH CX;将call时的地址入栈
					
 00C5  C3				RET
 00C6				MULDW ENDP

					    
 00C6				ERR1:

 00C6  8D 16 0000 R			LEA DX,STRING1
 00CA  B4 09				MOV AH,9
 00CC  CD 21				INT 21H
					
 00CE  B4 4C			    MOV AH,4CH
 00D0  CD 21			    INT 21H
				    
 00D2				ERR2:

 00D2  8D 16 000E R			LEA DX,STRING2
 00D6  B4 09				MOV AH,9
 00D8  CD 21				INT 21H
					
 00DA  B4 4C			    MOV AH,4CH
 00DC  CD 21			    INT 21H
				    
 00DE				CODES ENDS
				    END START















Microsoft (R) Macro Assembler Version 6.11		    06/03/18 15:56:47
tempfile.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 00DE	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0032	  Para	  Private 
STACKS . . . . . . . . . . . . .	16 Bit	 0000	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

MULDW  . . . . . . . . . . . . .	P Near	 0093	  CODES	Length= 0033 Public
  STEP4  . . . . . . . . . . . .	L Near	 00A0	  CODES	
  RETURN . . . . . . . . . . . .	L Near	 00A5	  CODES	


Symbols:

                N a m e                 Type     Value    Attr

COUNT  . . . . . . . . . . . . .	Word	 0030	  DATAS	
ERR1 . . . . . . . . . . . . . .	L Near	 00C6	  CODES	
ERR2 . . . . . . . . . . . . . .	L Near	 00D2	  CODES	
INPUT  . . . . . . . . . . . . .	L Near	 000D	  CODES	
NUM  . . . . . . . . . . . . . .	Word	 0028	  DATAS	
N  . . . . . . . . . . . . . . .	Word	 002A	  DATAS	
OUTPUT . . . . . . . . . . . . .	L Near	 0085	  CODES	
RESULTH  . . . . . . . . . . . .	Word	 002C	  DATAS	
RESULTL  . . . . . . . . . . . .	Word	 002E	  DATAS	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
STEP2  . . . . . . . . . . . . .	L Near	 0039	  CODES	
STEP3  . . . . . . . . . . . . .	L Near	 0043	  CODES	
STRING1  . . . . . . . . . . . .	Byte	 0000	  DATAS	
STRING2  . . . . . . . . . . . .	Byte	 000E	  DATAS	
STRING3  . . . . . . . . . . . .	Byte	 0019	  DATAS	
STRING4  . . . . . . . . . . . .	Byte	 001F	  DATAS	

	   0 Warnings
	   0 Errors
